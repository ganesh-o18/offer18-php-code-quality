#!/usr/bin/env php


<?php

foreach ([__DIR__ . '/../../../vendor/autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
  if (file_exists($file)) {
    require $file;
    break;
  }
}

echo "YeAAAAAAAAAAAAAAAAAA";

class NonCamelCaseVariableVisitor extends PhpParser\NodeVisitorAbstract {
  public $nonCamelCaseVariables = [];

  public function enterNode(PhpParser\Node $node) {
    if ($node instanceof PhpParser\Node\Expr\Variable && is_string($node->name)) {
      // Check if the variable name is not camel case
      if (!preg_match('/^[a-z]+([A-Z][a-z]*)*$/', $node->name)) {
        $this->nonCamelCaseVariables[] = $node->name;
      }
    }
  }
}

$code = <<<'CODE'
<?php
$nonCamel_case = 1;
$another_var = 2;
$CamelCase = 3;
$correctVariable = 4;
CODE;

try {
  $parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7);
  $ast = $parser->parse($code);

  $traverser = new PhpParser\NodeTraverser\NodeTraverser();
  $visitor = new NonCamelCaseVariableVisitor();
  $traverser->addVisitor($visitor);
  $traverser->traverse($ast);
  echo "Non-camel-case variables:\n";
  if (count($visitor->nonCamelCaseVariables) > 0) {
    echo @json_encode($visitor->nonCamelCaseVariables);
  }

} catch (Exception $e) {
  echo 'Parse error: ', $e->getMessage();
}

