#!/usr/bin/env php

<?php

// Check if directory path is provided as an argument
if ($argc < 2) {
  echo "Please provide a directory path as an argument." . PHP_EOL;
  exit(1);
}

$directory = $argv[1];

$paths = $directory . '/changed_files.txt';
$lines = file($paths, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

$files = [];
foreach ($lines as $line) {
    // Process each line
    echo $line . "\n";
    $files[] = $line;
}

foreach ($files as $file) {
  if ($file === '.' || $file === '..') continue;
  if (pathinfo($file, PATHINFO_EXTENSION) === 'php') {
    $phpFiles[] = $file;
  }
}

function isCamelCase($string)
{
  $string = ltrim($string, '$');
  return preg_match('/^[a-z][a-zA-Z0-9]*$/', $string);
}

$nonCamelCaseVariables = [];

echo "FILE" . PHP_EOL;

echo @json_encode($phpFiles) . PHP_EOL;

// List of global variables to ignore
$globalVariables = [
  '$_GET', '$_POST', '$_COOKIE', '$_SESSION', '$_REQUEST', '$_SERVER', '$_ENV', '$_FILES', '$_GLOBALS'
];


foreach ($phpFiles as $file) {
  $source = file_get_contents($file);
  $tokens = token_get_all($source);
  foreach ($tokens as $index => $token) {
    if (is_array($token) && $token[0] === T_VARIABLE) {
      $variableName = $token[1];
      if (in_array($variableName, $globalVariables)) {
        continue;
      }
      if (!isCamelCase($variableName)) {
        $nonCamelCaseVariables[] = $variableName;
      }
    }
  }
}

echo "Non camel-case variable" . PHP_EOL;
echo json_encode($nonCamelCaseVariables);

$outpuFilePath = $directory . '/output.txt';

$comment = '#### Following variables are not in camel case' . PHP_EOL;
foreach ($nonCamelCaseVariables as $variableName) {
  $comment .= '- ‚ùå ' . $variableName . PHP_EOL;
}
$comment = substr($comment, 0, 60000);
file_put_contents($outpuFilePath, $comment);
